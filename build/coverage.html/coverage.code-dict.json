{"/home/travis/build/npmtest/node-npmtest-bignum/test.js":"/* istanbul instrument in package npmtest_bignum */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bignum/lib.npmtest_bignum.js":"/* istanbul instrument in package npmtest_bignum */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bignum = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bignum = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bignum/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bignum && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bignum */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bignum\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bignum.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_bignum.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bignum.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_bignum.__dirname +\n                    '/lib.npmtest_bignum.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bignum/node_modules/bignum/index.js":"var binary = require('node-pre-gyp')\nvar path = require('path')\nvar binPath = binary.find(path.resolve(path.join(__dirname, 'package.json')))\nvar bin = require(binPath)\nvar BigNum = bin.BigNum\n\nmodule.exports = BigNum\n\nBigNum.conditionArgs = function (num, base) {\n  if (typeof num !== 'string') num = num.toString(base || 10)\n\n  if (num.match(/e\\+/)) { // positive exponent\n    if (!Number(num).toString().match(/e+/)) {\n      return {\n        num: Math.floor(Number(num)).toString(),\n        base: 10\n      }\n    } else {\n      var pow = Math.ceil(Math.log(num) / Math.log(2))\n      var n = (num / Math.pow(2, pow)).toString(2)\n        .replace(/^0/, '')\n      var i = n.length - n.indexOf('.')\n      n = n.replace(/\\./, '')\n\n      for (; i <= pow; i++) n += '0'\n      return {\n        num: n,\n        base: 2\n      }\n    }\n  } else if (num.match(/e\\-/)) { // negative exponent\n    return {\n      num: Math.floor(Number(num)).toString(),\n      base: base || 10\n    }\n  } else {\n    return {\n      num: num,\n      base: base || 10\n    }\n  }\n}\n\nbin.setJSConditioner(BigNum.conditionArgs)\n\nBigNum.isBigNum = function (num) {\n  if (!num) {\n    return false\n  }\n  for (var key in BigNum.prototype) {\n    if (!num[key]) {\n      return false\n    }\n  }\n  return true\n}\n\nBigNum.prototype.inspect = function () {\n  return '<BigNum ' + this.toString(10) + '>'\n}\n\nBigNum.prototype.toString = function (base) {\n  var value\n  if (base) {\n    value = this.tostring(base)\n  } else {\n    value = this.tostring()\n  }\n  if (base > 10 && typeof value === 'string') {\n    value = value.toLowerCase()\n  }\n  return value\n}\n\nBigNum.prototype.toNumber = function () {\n  return parseInt(this.toString(), 10)\n}\n\n;[ 'add', 'sub', 'mul', 'div', 'mod' ].forEach(function (op) {\n  BigNum.prototype[op] = function (num) {\n    var x\n    if (BigNum.isBigNum(num)) {\n      return this['b' + op](num)\n    } else if (typeof num === 'number') {\n      if (num >= 0) {\n        return this['u' + op](num)\n      } else if (op === 'add') {\n        return this.usub(-num)\n      } else if (op === 'sub') {\n        return this.uadd(-num)\n      } else {\n        x = BigNum(num)\n        return this['b' + op](x)\n      }\n    } else if (typeof num === 'string') {\n      x = BigNum(num)\n      return this['b' + op](x)\n    } else {\n      throw new TypeError('Unspecified operation for type ' +\n        (typeof num) + ' for ' + op)\n    }\n  }\n})\n\nBigNum.prototype.abs = function () {\n  return this.babs()\n}\n\nBigNum.prototype.neg = function () {\n  return this.bneg()\n}\n\nBigNum.prototype.powm = function (num, mod) {\n  var m\n\n  if ((typeof mod) === 'number' || (typeof mod) === 'string') {\n    m = BigNum(mod)\n  } else if (BigNum.isBigNum(mod)) {\n    m = mod\n  }\n\n  if ((typeof num) === 'number') {\n    return this.upowm(num, m)\n  } else if ((typeof num) === 'string') {\n    var n = BigNum(num)\n    return this.bpowm(n, m)\n  } else if (BigNum.isBigNum(num)) {\n    return this.bpowm(num, m)\n  }\n}\n\nBigNum.prototype.mod = function (num, mod) {\n  var m\n\n  if ((typeof mod) === 'number' || (typeof mod) === 'string') {\n    m = BigNum(mod)\n  } else if (BigNum.isBigNum(mod)) {\n    m = mod\n  }\n\n  if ((typeof num) === 'number') {\n    return this.umod(num, m)\n  } else if ((typeof num) === 'string') {\n    var n = BigNum(num)\n    return this.bmod(n, m)\n  } else if (BigNum.isBigNum(num)) {\n    return this.bmod(num, m)\n  }\n}\n\nBigNum.prototype.pow = function (num) {\n  if (typeof num === 'number') {\n    if (num >= 0) {\n      return this.upow(num)\n    } else {\n      return BigNum.prototype.powm.call(this, num, this)\n    }\n  } else {\n    var x = parseInt(num.toString(), 10)\n    return BigNum.prototype.pow.call(this, x)\n  }\n}\n\nBigNum.prototype.shiftLeft = function (num) {\n  if (typeof num === 'number') {\n    if (num >= 0) {\n      return this.umul2exp(num)\n    } else {\n      return this.shiftRight(-num)\n    }\n  } else {\n    var x = parseInt(num.toString(), 10)\n    return BigNum.prototype.shiftLeft.call(this, x)\n  }\n}\n\nBigNum.prototype.shiftRight = function (num) {\n  if (typeof num === 'number') {\n    if (num >= 0) {\n      return this.udiv2exp(num)\n    } else {\n      return this.shiftLeft(-num)\n    }\n  } else {\n    var x = parseInt(num.toString(), 10)\n    return BigNum.prototype.shiftRight.call(this, x)\n  }\n}\n\nBigNum.prototype.cmp = function (num) {\n  if (BigNum.isBigNum(num)) {\n    return this.bcompare(num)\n  } else if (typeof num === 'number') {\n    if (num < 0) {\n      return this.scompare(num)\n    } else {\n      return this.ucompare(num)\n    }\n  } else {\n    var x = BigNum(num)\n    return this.bcompare(x)\n  }\n}\n\nBigNum.prototype.gt = function (num) {\n  return this.cmp(num) > 0\n}\n\nBigNum.prototype.ge = function (num) {\n  return this.cmp(num) >= 0\n}\n\nBigNum.prototype.eq = function (num) {\n  return this.cmp(num) === 0\n}\n\nBigNum.prototype.ne = function (num) {\n  return this.cmp(num) !== 0\n}\n\nBigNum.prototype.lt = function (num) {\n  return this.cmp(num) < 0\n}\n\nBigNum.prototype.le = function (num) {\n  return this.cmp(num) <= 0\n}\n\n'and or xor'.split(' ').forEach(function (name) {\n  BigNum.prototype[name] = function (num) {\n    if (BigNum.isBigNum(num)) {\n      return this['b' + name](num)\n    } else {\n      var x = BigNum(num)\n      return this['b' + name](x)\n    }\n  }\n})\n\nBigNum.prototype.sqrt = function () {\n  return this.bsqrt()\n}\n\nBigNum.prototype.root = function (num) {\n  if (BigNum.isBigNum(num)) {\n    return this.broot(num)\n  } else {\n    return this.broot(num)\n  }\n}\n\nBigNum.prototype.rand = function (to) {\n  if (to === undefined) {\n    if (this.toString() === '1') {\n      return BigNum(0)\n    } else {\n      return this.brand0()\n    }\n  } else {\n    var x = BigNum.isBigNum(to)\n      ? to.sub(this)\n     : BigNum(to).sub(this)\n    return x.brand0().add(this)\n  }\n}\n\nBigNum.prototype.invertm = function (mod) {\n  if (BigNum.isBigNum(mod)) {\n    return this.binvertm(mod)\n  } else {\n    var x = BigNum(mod)\n    return this.binvertm(x)\n  }\n}\n\nBigNum.prime = function (bits, safe) {\n  if (typeof safe === 'undefined') {\n    safe = true\n  }\n\n  // Force uint32\n  bits >>>= 0\n\n  return BigNum.uprime0(bits, !!safe)\n}\n\nBigNum.prototype.probPrime = function (reps) {\n  var n = this.probprime(reps || 10)\n  return { 1: true, 0: false }[n]\n}\n\nBigNum.prototype.nextPrime = function () {\n  var num = this\n  do {\n    num = num.add(1)\n  } while (!num.probPrime())\n  return num\n}\n\nBigNum.prototype.isBitSet = function (n) {\n  return this.isbitset(n) === 1\n}\n\nBigNum.fromBuffer = function (buf, opts) {\n  if (!opts) opts = {}\n\n  var endian = { 1: 'big', '-1': 'little' }[opts.endian] ||\n    opts.endian || 'big'\n\n  var size = opts.size === 'auto' ? Math.ceil(buf.length) : (opts.size || 1)\n\n  if (buf.length % size !== 0) {\n    throw new RangeError('Buffer length (' + buf.length + ')' +\n      ' must be a multiple of size (' + size + ')'\n    )\n  }\n\n  var hex = []\n  for (var i = 0; i < buf.length; i += size) {\n    var chunk = []\n    for (var j = 0; j < size; j++) {\n      chunk.push(buf[i + (endian === 'big' ? j : (size - j - 1))])\n    }\n\n    hex.push(chunk\n      .map(function (c) {\n        return (c < 16 ? '0' : '') + c.toString(16)\n      })\n      .join('')\n    )\n  }\n\n  return BigNum(hex.join(''), 16)\n}\n\nBigNum.prototype.toBuffer = function (opts) {\n  if (typeof opts === 'string') {\n    if (opts !== 'mpint') return 'Unsupported Buffer representation'\n\n    var abs = this.abs()\n    var buf = abs.toBuffer({ size: 1, endian: 'big' })\n    var len = buf.length === 1 && buf[0] === 0 ? 0 : buf.length\n    if (buf[0] & 0x80) len++\n\n    var ret = new Buffer(4 + len)\n    if (len > 0) buf.copy(ret, 4 + (buf[0] & 0x80 ? 1 : 0))\n    if (buf[0] & 0x80) ret[4] = 0\n\n    ret[0] = len & (0xff << 24)\n    ret[1] = len & (0xff << 16)\n    ret[2] = len & (0xff << 8)\n    ret[3] = len & (0xff << 0)\n\n    // two's compliment for negative integers:\n    var isNeg = this.lt(0)\n    if (isNeg) {\n      for (var i = 4; i < ret.length; i++) {\n        ret[i] = 0xff - ret[i]\n      }\n    }\n    ret[4] = (ret[4] & 0x7f) | (isNeg ? 0x80 : 0)\n    if (isNeg) ret[ret.length - 1]++\n\n    return ret\n  }\n\n  if (!opts) opts = {}\n\n  var endian = { 1: 'big', '-1': 'little' }[opts.endian] ||\n    opts.endian || 'big'\n\n  var hex = this.toString(16)\n  if (hex.charAt(0) === '-') {\n    throw new Error('converting negative numbers to Buffers not supported yet')\n  }\n\n  var size = opts.size === 'auto' ? Math.ceil(hex.length / 2) : (opts.size || 1)\n\n  len = Math.ceil(hex.length / (2 * size)) * size\n  buf = new Buffer(len)\n\n  // zero-pad the hex string so the chunks are all `size` long\n  while (hex.length < 2 * len) hex = '0' + hex\n\n  var hx = hex\n    .split(new RegExp('(.{' + (2 * size) + '})'))\n    .filter(function (s) { return s.length > 0 })\n\n  hx.forEach(function (chunk, i) {\n    for (var j = 0; j < size; j++) {\n      var ix = i * size + (endian === 'big' ? j : size - j - 1)\n      buf[ix] = parseInt(chunk.slice(j * 2, j * 2 + 2), 16)\n    }\n  })\n\n  return buf\n}\n\nObject.keys(BigNum.prototype).forEach(function (name) {\n  if (name === 'inspect' || name === 'toString') return\n\n  BigNum[name] = function (num) {\n    var args = [].slice.call(arguments, 1)\n\n    if (BigNum.isBigNum(num)) {\n      return num[name].apply(num, args)\n    } else {\n      var bigi = BigNum(num)\n      return bigi[name].apply(bigi, args)\n    }\n  }\n})\n"}